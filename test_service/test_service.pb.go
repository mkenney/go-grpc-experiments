// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_service.proto

/*
Package test_service is a generated protocol buffer package.

It is generated from these files:
	test_service.proto

It has these top-level messages:
	GUID
	ValidationResult
	SignedToken
*/
package test_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GUID struct {
	Guid string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
}

func (m *GUID) Reset()                    { *m = GUID{} }
func (m *GUID) String() string            { return proto.CompactTextString(m) }
func (*GUID) ProtoMessage()               {}
func (*GUID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GUID) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

type ValidationResult struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *ValidationResult) Reset()                    { *m = ValidationResult{} }
func (m *ValidationResult) String() string            { return proto.CompactTextString(m) }
func (*ValidationResult) ProtoMessage()               {}
func (*ValidationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ValidationResult) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type SignedToken struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *SignedToken) Reset()                    { *m = SignedToken{} }
func (m *SignedToken) String() string            { return proto.CompactTextString(m) }
func (*SignedToken) ProtoMessage()               {}
func (*SignedToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SignedToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*GUID)(nil), "test_service.GUID")
	proto.RegisterType((*ValidationResult)(nil), "test_service.ValidationResult")
	proto.RegisterType((*SignedToken)(nil), "test_service.SignedToken")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteGuide service

type RouteGuideClient interface {
	GenerateToken(ctx context.Context, in *GUID, opts ...grpc.CallOption) (*SignedToken, error)
	ValidateToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*ValidationResult, error)
	RefreshToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*SignedToken, error)
}

type routeGuideClient struct {
	cc *grpc.ClientConn
}

func NewRouteGuideClient(cc *grpc.ClientConn) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) GenerateToken(ctx context.Context, in *GUID, opts ...grpc.CallOption) (*SignedToken, error) {
	out := new(SignedToken)
	err := grpc.Invoke(ctx, "/test_service.RouteGuide/GenerateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) ValidateToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*ValidationResult, error) {
	out := new(ValidationResult)
	err := grpc.Invoke(ctx, "/test_service.RouteGuide/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) RefreshToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*SignedToken, error) {
	out := new(SignedToken)
	err := grpc.Invoke(ctx, "/test_service.RouteGuide/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouteGuide service

type RouteGuideServer interface {
	GenerateToken(context.Context, *GUID) (*SignedToken, error)
	ValidateToken(context.Context, *SignedToken) (*ValidationResult, error)
	RefreshToken(context.Context, *SignedToken) (*SignedToken, error)
}

func RegisterRouteGuideServer(s *grpc.Server, srv RouteGuideServer) {
	s.RegisterService(&_RouteGuide_serviceDesc, srv)
}

func _RouteGuide_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_service.RouteGuide/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GenerateToken(ctx, req.(*GUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_service.RouteGuide/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).ValidateToken(ctx, req.(*SignedToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_service.RouteGuide/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).RefreshToken(ctx, req.(*SignedToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteGuide_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test_service.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _RouteGuide_GenerateToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _RouteGuide_ValidateToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _RouteGuide_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test_service.proto",
}

func init() { proto.RegisterFile("test_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x49, 0x2d, 0x2e,
	0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x53, 0x92, 0xe2, 0x62, 0x71, 0x0f, 0xf5, 0x74, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x2f,
	0xcd, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x34, 0xb8, 0x04, 0xc2,
	0x12, 0x73, 0x32, 0x53, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x82, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x84,
	0x44, 0xb8, 0x58, 0xcb, 0x40, 0x62, 0x60, 0x85, 0x1c, 0x41, 0x10, 0x8e, 0x92, 0x32, 0x17, 0x77,
	0x70, 0x66, 0x7a, 0x5e, 0x6a, 0x4a, 0x48, 0x7e, 0x76, 0x6a, 0x1e, 0x48, 0x51, 0x09, 0x88, 0x01,
	0x35, 0x0d, 0xc2, 0x31, 0x7a, 0xc2, 0xc8, 0xc5, 0x15, 0x94, 0x5f, 0x5a, 0x92, 0xea, 0x5e, 0x9a,
	0x99, 0x92, 0x2a, 0xe4, 0xc0, 0xc5, 0xeb, 0x9e, 0x9a, 0x97, 0x5a, 0x94, 0x58, 0x92, 0x0a, 0xd1,
	0x25, 0xa4, 0x87, 0xe2, 0x5a, 0x90, 0xb3, 0xa4, 0x24, 0x51, 0xc5, 0x90, 0x2c, 0x51, 0x62, 0x10,
	0xf2, 0xe1, 0xe2, 0x85, 0xba, 0x0f, 0x6a, 0x02, 0x6e, 0xd5, 0x52, 0x72, 0xa8, 0x52, 0xe8, 0xfe,
	0x52, 0x62, 0x10, 0x72, 0xe3, 0xe2, 0x09, 0x4a, 0x4d, 0x2b, 0x4a, 0x2d, 0xce, 0x20, 0x68, 0x18,
	0x3e, 0x57, 0x25, 0xb1, 0x81, 0x83, 0xd9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x39, 0x9e,
	0x5e, 0x7c, 0x01, 0x00, 0x00,
}
